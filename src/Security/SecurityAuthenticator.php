<?php

namespace App\Security;

use App\Entity\Survey;
use App\Entity\User;
use App\Form\SurveyType;
use App\Services\SurveyService;
use DateTime;
use Doctrine\ORM\EntityManagerInterface;
use Symfony\Component\Config\Definition\Exception\Exception;
use Symfony\Component\HttpFoundation\RedirectResponse;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\HttpFoundation\Response;
use Symfony\Component\Routing\Generator\UrlGeneratorInterface;
use Symfony\Component\Security\Core\Authentication\Token\TokenInterface;
use Symfony\Component\Security\Core\Encoder\UserPasswordEncoderInterface;
use Symfony\Component\Security\Core\Exception\AuthenticationException;
use Symfony\Component\Security\Core\Exception\CustomUserMessageAuthenticationException;
use Symfony\Component\Security\Core\Exception\InvalidCsrfTokenException;
use Symfony\Component\Security\Core\Security;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Csrf\CsrfToken;
use Symfony\Component\Security\Csrf\CsrfTokenManagerInterface;
use Symfony\Component\Security\Guard\Authenticator\AbstractFormLoginAuthenticator;
use Symfony\Component\Security\Guard\PasswordAuthenticatedInterface;
use Symfony\Component\Security\Http\Util\TargetPathTrait;

class SecurityAuthenticator extends AbstractFormLoginAuthenticator implements PasswordAuthenticatedInterface
{
    use TargetPathTrait;

    private $entityManager;
    private $urlGenerator;
    private $csrfTokenManager;
    private $passwordEncoder;
    private $userSurvey;

    public function __construct(EntityManagerInterface $entityManager, UrlGeneratorInterface $urlGenerator,
                                CsrfTokenManagerInterface $csrfTokenManager, UserPasswordEncoderInterface $passwordEncoder,
                                Security $userSurvey
    )
    {
        $this->entityManager = $entityManager;
        $this->urlGenerator = $urlGenerator;
        $this->csrfTokenManager = $csrfTokenManager;
        $this->passwordEncoder = $passwordEncoder;
        $this->userSurvey = $userSurvey;
    }

    public function supports(Request $request)
    {
        return 'app_login' === $request->attributes->get('_route')
            && $request->isMethod('POST');
    }

    public function getCredentials(Request $request)
    {
        $credentials = [
            'idPaneliste' => $request->request->get('idPaneliste'),
            'csrf_token' => $request->request->get('_csrf_token'),
            'jour' => $request->request->get('jour'),
            'mois' => $request->request->get('mois'),
            'annee' => $request->request->get('annee'),

        ];
        //dd($credentials);
        $request->getSession()->set(
            Security::LAST_USERNAME,
            $credentials['idPaneliste']
        );

        return $credentials;
    }


    public function getUser($credentials, UserProviderInterface $userProvider)
    {
        $token = new CsrfToken('authenticate', $credentials['csrf_token']);
        if (!$this->csrfTokenManager->isTokenValid($token)) {
            //   throw new InvalidCsrfTokenException();
        }

        $user = $this->entityManager->getRepository(User::class)->findOneBy(['idPaneliste' => $credentials['idPaneliste']]);

        //dump($user);
        if (!$user) {
            // fail authentication with a custom error
            throw new CustomUserMessageAuthenticationException('Les information sont incorrect !');
        }

        return $user;
    }

    /**
     * @param mixed $credentials
     * @param User $user
     * @return bool
     */
    public function checkCredentials($credentials, UserInterface $user)
    {
        /** @var DateTime $birthDay */
        $birthDay = $user->getBirthdate();
        $formatDate = $birthDay->format('dmY');
        return $credentials['jour'] . $credentials['mois'] . $credentials['annee'] == $formatDate;
    }

    public function getPassword($credentials): ?string
    {
        // TODO: Implement getPassword() method.
        //il return
        return '';
    }

    public function onAuthenticationFailure(Request $request, AuthenticationException $exception)
    {
        return parent::onAuthenticationFailure($request, $exception); // TODO: Change the autogenerated stub
    }

    public function onAuthenticationSuccess(Request $request, TokenInterface $token, $providerKey)
    {
        //dd($this->getTargetPath($request->getSession(), $providerKey));
        if ($targetPath = $this->getTargetPath($request->getSession(), $providerKey)) {
            return new RedirectResponse($targetPath);
        }
        //$userI = $this->getUser()->getTitle();
        $user = $token->getUser();
        //dd($user);

        $id = $this->userSurvey->getUser()->getPanelisteGroups();


        /*
         $idLink = $this->userSurvey->getUser()->getPanelisteGroups();

         $idLinkIdSurvey = null;
         //for sur une collection
         foreach ($idLink->getIterator() as $idLink => $valueIdLink) {

             $panelise_groupIdLink = $valueIdLink->getSurveys();
             foreach ($panelise_groupIdLink->getIterator() as $valueIdLink => $valueIdLink2) {
                 $idLinkIdSurvey = $valueIdLink2->getPanelisteGroup();
             }
         }

         dump();
         die();
        */

        /*
         $idSurvey = null;
         foreach ($id->getIterator() as $id => $value) {
             $panelise_group = $value->getSurveys();
             foreach ($panelise_group->getIterator() as $value => $values2) {
                 $idSurvey = $values2->getId();
             }
         }



         if (is_null($idSurvey)) {
             // fail authentication with a custom error
             return new RedirectResponse($this->urlGenerator->generate('app_login', ["msg" => "Pas de test en cours"]));

         }
        */

        $enabled = $this->userSurvey->getUser()->getEnabled();
        if (!$enabled) {
            // fail authentication with a custom error
            return new RedirectResponse($this->urlGenerator->generate('app_login', ["enabled" => "Votre compte est desactivÃ© !"]));
        }

        /*
        if ($user->hasRole('ROLE_ADMIN')) {
            return new RedirectResponse($this->urlGenerator->generate('admin_survey_tests_index'));
        }*/

        return new RedirectResponse($this->urlGenerator->generate('user_accueil_index'));
    }

    protected function getLoginUrl()
    {
        return $this->urlGenerator->generate('app_login');
    }

}
