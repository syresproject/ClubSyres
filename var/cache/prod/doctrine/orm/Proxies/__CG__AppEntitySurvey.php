<?php

namespace Proxies\__CG__\App\Entity;

/**
 * DO NOT EDIT THIS FILE - IT WAS CREATED BY DOCTRINE'S PROXY GENERATOR
 */
class Survey extends \App\Entity\Survey implements \Doctrine\ORM\Proxy\Proxy
{
    /**
     * @var \Closure the callback responsible for loading properties in the proxy object. This callback is called with
     *      three parameters, being respectively the proxy object to be initialized, the method that triggered the
     *      initialization process and an array of ordered parameters that were passed to that method.
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setInitializer
     */
    public $__initializer__;

    /**
     * @var \Closure the callback responsible of loading properties that need to be copied in the cloned object
     *
     * @see \Doctrine\Common\Proxy\Proxy::__setCloner
     */
    public $__cloner__;

    /**
     * @var boolean flag indicating if this object was already initialized
     *
     * @see \Doctrine\Persistence\Proxy::__isInitialized
     */
    public $__isInitialized__ = false;

    /**
     * @var array<string, null> properties to be lazy loaded, indexed by property name
     */
    public static $lazyPropertiesNames = array (
);

    /**
     * @var array<string, mixed> default values of properties to be lazy loaded, with keys being the property names
     *
     * @see \Doctrine\Common\Proxy\Proxy::__getLazyProperties
     */
    public static $lazyPropertiesDefaults = array (
);



    public function __construct(?\Closure $initializer = null, ?\Closure $cloner = null)
    {

        $this->__initializer__ = $initializer;
        $this->__cloner__      = $cloner;
    }







    /**
     * 
     * @return array
     */
    public function __sleep()
    {
        if ($this->__isInitialized__) {
            return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'idSurvey', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'type', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'externalType', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'category', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'panelisteGroup', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'links', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'focusGroup', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageFile', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageName', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageSize', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'updatedAt'];
        }

        return ['__isInitialized__', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'id', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'idSurvey', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'name', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'type', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'externalType', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'status', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'visible', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'description', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'category', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'panelisteGroup', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'links', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'focusGroup', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageFile', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageName', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'imageSize', '' . "\0" . 'App\\Entity\\Survey' . "\0" . 'updatedAt'];
    }

    /**
     * 
     */
    public function __wakeup()
    {
        if ( ! $this->__isInitialized__) {
            $this->__initializer__ = function (Survey $proxy) {
                $proxy->__setInitializer(null);
                $proxy->__setCloner(null);

                $existingProperties = get_object_vars($proxy);

                foreach ($proxy::$lazyPropertiesDefaults as $property => $defaultValue) {
                    if ( ! array_key_exists($property, $existingProperties)) {
                        $proxy->$property = $defaultValue;
                    }
                }
            };

        }
    }

    /**
     * 
     */
    public function __clone()
    {
        $this->__cloner__ && $this->__cloner__->__invoke($this, '__clone', []);
    }

    /**
     * Forces initialization of the proxy
     */
    public function __load()
    {
        $this->__initializer__ && $this->__initializer__->__invoke($this, '__load', []);
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __isInitialized()
    {
        return $this->__isInitialized__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitialized($initialized)
    {
        $this->__isInitialized__ = $initialized;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setInitializer(\Closure $initializer = null)
    {
        $this->__initializer__ = $initializer;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __getInitializer()
    {
        return $this->__initializer__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     */
    public function __setCloner(\Closure $cloner = null)
    {
        $this->__cloner__ = $cloner;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific cloning logic
     */
    public function __getCloner()
    {
        return $this->__cloner__;
    }

    /**
     * {@inheritDoc}
     * @internal generated method: use only when explicitly handling proxy specific loading logic
     * @deprecated no longer in use - generated code now relies on internal components rather than generated public API
     * @static
     */
    public function __getLazyProperties()
    {
        return self::$lazyPropertiesDefaults;
    }

    
    /**
     * {@inheritDoc}
     */
    public function __toString()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, '__toString', []);

        return parent::__toString();
    }

    /**
     * {@inheritDoc}
     */
    public function getId()
    {
        if ($this->__isInitialized__ === false) {
            return (int)  parent::getId();
        }


        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getId', []);

        return parent::getId();
    }

    /**
     * {@inheritDoc}
     */
    public function setIdSurvey($idSurvey)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setIdSurvey', [$idSurvey]);

        return parent::setIdSurvey($idSurvey);
    }

    /**
     * {@inheritDoc}
     */
    public function getIdSurvey()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getIdSurvey', []);

        return parent::getIdSurvey();
    }

    /**
     * {@inheritDoc}
     */
    public function setName($name)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setName', [$name]);

        return parent::setName($name);
    }

    /**
     * {@inheritDoc}
     */
    public function getName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getName', []);

        return parent::getName();
    }

    /**
     * {@inheritDoc}
     */
    public function setType($type)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setType', [$type]);

        return parent::setType($type);
    }

    /**
     * {@inheritDoc}
     */
    public function getType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getType', []);

        return parent::getType();
    }

    /**
     * {@inheritDoc}
     */
    public function getTypeFormatted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getTypeFormatted', []);

        return parent::getTypeFormatted();
    }

    /**
     * {@inheritDoc}
     */
    public function setDescription($description)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setDescription', [$description]);

        return parent::setDescription($description);
    }

    /**
     * {@inheritDoc}
     */
    public function getDescription()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getDescription', []);

        return parent::getDescription();
    }

    /**
     * {@inheritDoc}
     */
    public function setCategory(\App\Entity\Category $category = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCategory', [$category]);

        return parent::setCategory($category);
    }

    /**
     * {@inheritDoc}
     */
    public function getCategory()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getCategory', []);

        return parent::getCategory();
    }

    /**
     * {@inheritDoc}
     */
    public function setPanelisteGroup(\App\Entity\PanelisteGroup $panelisteGroup = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setPanelisteGroup', [$panelisteGroup]);

        return parent::setPanelisteGroup($panelisteGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getPanelisteGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getPanelisteGroup', []);

        return parent::getPanelisteGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function setStatus($status)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setStatus', [$status]);

        return parent::setStatus($status);
    }

    /**
     * {@inheritDoc}
     */
    public function getStatus()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatus', []);

        return parent::getStatus();
    }

    /**
     * {@inheritDoc}
     */
    public function getStatusFormatted()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getStatusFormatted', []);

        return parent::getStatusFormatted();
    }

    /**
     * {@inheritDoc}
     */
    public function setVisible($visible)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setVisible', [$visible]);

        return parent::setVisible($visible);
    }

    /**
     * {@inheritDoc}
     */
    public function isVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'isVisible', []);

        return parent::isVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function getVisible()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getVisible', []);

        return parent::getVisible();
    }

    /**
     * {@inheritDoc}
     */
    public function addLink(\App\Entity\Link $link)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'addLink', [$link]);

        return parent::addLink($link);
    }

    /**
     * {@inheritDoc}
     */
    public function removeLink(\App\Entity\Link $link)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'removeLink', [$link]);

        return parent::removeLink($link);
    }

    /**
     * {@inheritDoc}
     */
    public function getLinks()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getLinks', []);

        return parent::getLinks();
    }

    /**
     * {@inheritDoc}
     */
    public function setFocusGroup(\App\Entity\FocusGroup $focusGroup = NULL)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setFocusGroup', [$focusGroup]);

        return parent::setFocusGroup($focusGroup);
    }

    /**
     * {@inheritDoc}
     */
    public function getFocusGroup()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getFocusGroup', []);

        return parent::getFocusGroup();
    }

    /**
     * {@inheritDoc}
     */
    public function getExternalType()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getExternalType', []);

        return parent::getExternalType();
    }

    /**
     * {@inheritDoc}
     */
    public function setExternalType($externalType)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setExternalType', [$externalType]);

        return parent::setExternalType($externalType);
    }

    /**
     * {@inheritDoc}
     */
    public function setCreatedAtValue()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setCreatedAtValue', []);

        return parent::setCreatedAtValue();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageFile(\Symfony\Component\HttpFoundation\File\File $imageFile = NULL): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageFile', [$imageFile]);

        parent::setImageFile($imageFile);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageFile(): ?\Symfony\Component\HttpFoundation\File\File
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageFile', []);

        return parent::getImageFile();
    }

    /**
     * {@inheritDoc}
     */
    public function getImageName()
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageName', []);

        return parent::getImageName();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageName(?string $image)
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageName', [$image]);

        return parent::setImageName($image);
    }

    /**
     * {@inheritDoc}
     */
    public function getImageSize(): ?int
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'getImageSize', []);

        return parent::getImageSize();
    }

    /**
     * {@inheritDoc}
     */
    public function setImageSize(?int $imageSize): void
    {

        $this->__initializer__ && $this->__initializer__->__invoke($this, 'setImageSize', [$imageSize]);

        parent::setImageSize($imageSize);
    }

}
